#include <ncurses/ncurses.h>
#include <unistd.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <windows.h>
#include <vector>
#include <ctime>

using namespace std;

#define DELAY 200000
const std::string HIGHSCORE_FILE = "pacman_highscore.txt";

void print_text(const char* text, int y, int x, int color_pair) {
    attron(COLOR_PAIR(color_pair));
    mvprintw(y, x, "%s", text);
    attroff(COLOR_PAIR(color_pair));
}

void progress_bar(int y, int x, int length, int duration) {
    char spinner[] = {'|', '/', '-', '\\'};
    for (int i = 0; i < length; i++) {
        print_text(">", y, x + i, 1);
        mvprintw(y, x + length + 2, "[%c]", spinner[i % 4]);
        refresh();
        Sleep(200);
    }
}

void loadingScreen() {
    initscr();
    noecho();
    curs_set(0);
    start_color();
    init_pair(1, COLOR_GREEN, COLOR_BLACK);
    init_pair(2, COLOR_RED, COLOR_BLACK);
    init_pair(3, COLOR_YELLOW, COLOR_BLACK);
    clear();
    print_text("Loading...", 10, 30, 2);
    print_text("--------------------", 11, 30, 3);
    print_text("|                  |", 12, 30, 3);
    print_text("--------------------", 13, 30, 3);
    progress_bar(12, 31, 18, DELAY);
    clear();
    refresh();
    Sleep(50);
    endwin();
}

void setColor(int color) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

void animatedText(const string &text, int speed = 50) {
    for (char c : text) {
        cout << c;
        Sleep(speed);
    }
    cout << endl;
}

void registration() {
    ofstream myFile, accList;
    string userReg;
    system("cls");
    setColor(10);
    animatedText("------------->REGISTER<--------------");
    setColor(15);
    cout << "Enter username: ";
    cin >> userReg;
    myFile.open(userReg + ".txt");
    myFile << 0;
    myFile.close();
    accList.open("ListAccount.txt", ios::app);
    accList << userReg << endl;
    accList.close();
    system("cls");
    setColor(11);
    animatedText("Registration successful!");
    setColor(15);
}

void login() {
    ifstream myFile;
    string userLog;
    string userData;
    bool exist = false;
    system("cls");
    setColor(14);
    animatedText("------------->LOGIN<--------------");
    setColor(15);
    cout << "Enter username: ";
    cin >> userLog;

    myFile.open("ListAccount.txt");
    while (myFile >> userData) {
        if (userData == userLog) {
            exist = true;
            break;
        }
    }

myFile.close();

    if (exist) {
        system("cls");
        setColor(10);
        animatedText("Login successful!");
        setColor(15);
    } else {
        system("cls");
        setColor(12);
        animatedText("---------------------------------------");
        animatedText("               LOGIN ERROR             ");
        animatedText("Please check your username and try again");
        animatedText("---------------------------------------");
        setColor(15);
    }
}

int loadHighScore() {
    ifstream file(HIGHSCORE_FILE);
    int highscore = 0;
    if (file.is_open()) {
        file >> highscore;
        file.close();
    }
    return highscore;
}

void saveHighScore(int score) {
    ofstream file(HIGHSCORE_FILE);
    if (file.is_open()) {
        file << score;
        file.close();
    }
}

int selectLevel() {
    initscr();
    noecho();
    curs_set(0);
    keypad(stdscr, true);

    const vector<string> levels = {"Easy", "Medium", "Hard"};
    int choice = 0;

    while (true) {
        clear();
        mvprintw(5, 10, "Select Difficulty:");
        for (int i = 0; i < levels.size(); ++i) {
            if (i == choice)
                attron(A_REVERSE);
            mvprintw(7 + i, 12, levels[i].c_str());
            if (i == choice)
                attroff(A_REVERSE);
        }

        int ch = getch();
        if (ch == KEY_UP && choice > 0) choice--;
        else if (ch == KEY_DOWN && choice < levels.size() - 1) choice++;
        else if (ch == '\n') break;
    }

    endwin();
    return choice;
}

void playGame() {
    srand(time(nullptr));

    int level = selectLevel();
    int moveDelay;
    if (level == 0) moveDelay = 500;
    else if (level == 1) moveDelay = 300;
    else moveDelay = 150;

    initscr();
    noecho();
    cbreak();
    curs_set(0);
    keypad(stdscr, true);

    vector<string> arena = {
        "|............................|",
        "|.............|........|.....|",
        "|..|..................|......|",
        "|.................|..........|",
        "|......|.....................|",
        "|..........|........|........|",
        "|..............|..........|..|",
        "|....|.............|.........|",
        "|..........|.................|",
    };

int score = 0;
    int highscore = loadHighScore();
    int px = 1, py = 1;
    int ex = 4, ey = 3;
    WINDOW* gameWin = newwin(15, 40, 1, 1);

    bool gameRunning = true;
    while (gameRunning) {
        werase(gameWin);
        box(gameWin, 0, 0);
        mvwprintw(gameWin, 1, 2, "Pac-Man Lite");
        mvwprintw(gameWin, 2, 2, ("Score: " + to_string(score)).c_str());
        mvwprintw(gameWin, 3, 2, ("High Score: " + to_string(highscore)).c_str());

        for (int i = 0; i < arena.size(); ++i) {
            mvwprintw(gameWin, 5 + i, 2, arena[i].c_str());
        }

        mvwaddch(gameWin, px + 5, py + 2, 'P');
        mvwaddch(gameWin, ex + 5, ey + 2, 'M');
        wrefresh(gameWin);

        int ch = getch();
        int nx = px, ny = py;

        if (ch == 'q') break;
        else if (ch == KEY_UP) nx--;
        else if (ch == KEY_DOWN) nx++;
        else if (ch == KEY_LEFT) ny--;
        else if (ch == KEY_RIGHT) ny++;

        if (nx >= 0 && nx < arena.size() && ny >= 0 && ny < arena[nx].size() && arena[nx][ny] != '|') {
            if (arena[nx][ny] == '.') {
                score++;
                arena[nx][ny] = ' ';
            }
            px = nx;
            py = ny;
        }

        int dx[] = {0, 0, -1, 1};
        int dy[] = {-1, 1, 0, 0};
        int dir = rand() % 4;
        int new_ex = ex + dx[dir];
        int new_ey = ey + dy[dir];

        if (new_ex >= 0 && new_ex < arena.size() && new_ey >= 0 && new_ey < arena[new_ex].size() && arena[new_ex][new_ey] != '|') {
            ex = new_ex;
            ey = new_ey;
        }

        napms(moveDelay);
        if (px == ex && py == ey) {
            mvprintw(30, 15, "Game Over!");
            mvprintw(31, 15, "YAHH");
            refresh();
            Sleep(3000);
            gameRunning = false;
        }

        bool won = true;
        for (const auto& row : arena) {
            if (row.find('.') != string::npos) {
                won = false;
                break;
            }
        }

        if (won) {
            mvprintw(30, 15, "You Win!");
            mvprintw(31, 15, "Yeyyy");
            refresh();
            Sleep(3000);
            gameRunning = false;
        }
    }

    if (score > highscore) saveHighScore(score);

    delwin(gameWin);
    endwin();
}

int main() {
    loadingScreen();
    int choice;

    while (true) {
        system("cls");
        setColor(13);
        animatedText("=====================================");
        animatedText("       WELCOME TO THE PROGRAM       ");
        animatedText("=====================================");
        setColor(15);
        cout << "1. Registration/Login" << endl;
        cout << "2. Play Pac-Man Game" << endl;
        cout << "3. Exit" << endl;
        cout << "Input your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                system("cls");
                cout << "1. Register\n2. Login\nChoose: ";
                cin >> choice;
                if (choice == 1) registration();
                else if (choice == 2) login();
                break;
            case 2:
                playGame();
                break;
            case 3:
                setColor(14);
                cout << "Goodbye!" << endl;
                setColor(15);
                return 0;
            default:
                setColor(12);
                cout << "Invalid choice! Please try again." << endl;
                setColor(15);
                system("pause");
                break;
        }
    }
}
